<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>why-are-you-like-this-js on Thomas Wilson</title><link>https://www.thomaswilson.xyz/tags/why-are-you-like-this-js/</link><description>Recent content in why-are-you-like-this-js on Thomas Wilson</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Â© Thomas Wilson</copyright><lastBuildDate>Sun, 01 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.thomaswilson.xyz/tags/why-are-you-like-this-js/index.xml" rel="self" type="application/rss+xml"/><item><title>Why are you like this JavaScript? JavaScript Runtimes and Engines</title><link>https://www.thomaswilson.xyz/blog/2020-11-01-js-runtimes-and-engines/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.thomaswilson.xyz/blog/2020-11-01-js-runtimes-and-engines/</guid><description>Sometimes you keep hearing words but you&amp;rsquo;re not actually sure what they mean, but you&amp;rsquo;re too afraid to ask and keep forgetting to Google it. For me, two of those phrases have been &amp;ldquo;JavaScript runtime&amp;rdquo; and &amp;ldquo;JavaScript engine&amp;rdquo;. I&amp;rsquo;ve never studied Comp Sci at uni, and I&amp;rsquo;ve never practically needed to be able to define either of them.
If that sounds similar to you, then buckle up cowboys and cowgirls because you&amp;rsquo;re about to go &amp;ldquo;oh, yeah, cool&amp;rdquo; a lot at some pretty basic distinctions that you probably intuitively knew but didn&amp;rsquo;t have the words for.</description></item><item><title>Why are you like this, JavaScript? An introduction to Promises by using Fetch.</title><link>https://www.thomaswilson.xyz/blog/2020-09-06-javascript-promises-introduction/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.thomaswilson.xyz/blog/2020-09-06-javascript-promises-introduction/</guid><description>Let&amp;rsquo;s start with a correct, but pretty dense, definition: JavaScript Promises are a first-class abstraction for handling asynchronous actions, like:
Fetching data from a remote API. Reading or writing (i.e. opening or saving) a file to the filesystem (in a server-side environment, not in a browser). Retrieving a non-blurred-up version of an image based on a page-scroll event. Using network or system utilities in native mobile frameworks like react-native or expo.</description></item><item><title>Why are you like this, JavaScript? Taking a look at JavaScript's single threaded nature.</title><link>https://www.thomaswilson.xyz/blog/2020-08-23-why-are-you-like-this-javascript/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://www.thomaswilson.xyz/blog/2020-08-23-why-are-you-like-this-javascript/</guid><description>Sometimes you hear something so often that you don&amp;rsquo;t really hear it anymore. One of those things for me is words to the effect of &amp;ldquo;How does this JavaScript code even run?&amp;rdquo;. I choose to interpret this generously as &amp;ldquo;How does JavaScript itself run&amp;rdquo;, and not &amp;ldquo;how does this hot garbage code you wrote run?&amp;rdquo;.[^I really hope I don&amp;rsquo;t write as much hot garbage JavaScript as I used to]
There&amp;rsquo;s a lot of ways we could describe JavaScript (including some really colourful adjectives), but objectively it is an asynchronous, single-threaded, dynamic programming language.</description></item></channel></rss>